//apply plugin: 'java'
apply plugin: 'spring-boot'
springBoot {
    layout = 'JAR'
}
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'sonar-runner'

sourceCompatibility = 1.8
version = '1.0'
 
ext {
        springBootVersion = '1.3.5.RELEASE'
        springVersion = '4.2.6.RELEASE'
        springIntegrationDSLVersion = '1.1.3.RELEASE'
        nexusUser = "admin"
        nexusPassword = "R3dB33575"
        nexusUrl = "http://nexus.redb.ee/content/repositories/releases/"
        nexusSnapshot = "http://nexus.redb.ee/content/repositories/snapshots/"
    }
    
buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
        dependencies {
            classpath 'org.springframework:springloaded:1.2.5.RELEASE'
            classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        }
   }    
       
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        credentials {
            username "${nexusUser}"
            password "${nexusPassword}"
        }
        url "${nexusUrl}"
    }
    maven {
        credentials {
            username "${nexusUser}"
            password "${nexusPassword}"
        }
        url "${nexusSnapshot}"
    }
    }

dependencies {
        testCompile "junit:junit:4.8.2"
        testCompile "org.mockito:mockito-core:1.+"
        testCompile "org.springframework.integration:spring-integration-test:${springVersion}"
        compile "org.springframework:spring-core:${springVersion}"
        compile "org.springframework:spring-context:${springVersion}"
        compile "org.springframework:spring-aop:${springVersion}"
        compile "org.springframework:spring-expression:${springVersion}"
        compile "org.springframework:spring-beans:${springVersion}"
        compile "org.springframework:spring-aspects:${springVersion}"
        compile "org.springframework.integration:spring-integration-core:${springVersion}"
        compile "org.springframework.integration:spring-integration-amqp:${springVersion}"
        compile "org.springframework.integration:spring-integration-file:${springVersion}"
        compile "org.springframework.integration:spring-integration-java-dsl:${springIntegrationDSLVersion}"
        compile 'org.springframework.amqp:spring-rabbit:1.5.6.RELEASE'
    	compile "ch.qos.logback:logback-classic:1.1.5"
	    compile "ch.qos.logback:logback-access:1.1.5"
	    compile "ch.qos.logback:logback-core:1.1.5"
	    compile "org.springframework.boot:spring-boot:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-actuator:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
	    compile "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"        
		compile "com.univocity:univocity-parsers:2.1.2"

}

test {
    systemProperties 'property': 'value'
}

group = 'com.grupocarsa.contingency'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}") {
                authentication(userName: "${nexusUser}",
                        password: "${nexusPassword}")
            }
            snapshotRepository(url: "${nexusSnapshot}") {
                authentication(userName: "${nexusUser}",
                        password: "${nexusPassword}")
            }
        }
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}
